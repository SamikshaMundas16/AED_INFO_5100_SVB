/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.main;

import database.DbUtils;
import java.util.List;
import javax.swing.JOptionPane;
import database.DbUtils;
import java.util.List;
import javax.swing.JOptionPane;
import ModelNew.Book;
import ModelNew.BussEvent;
import ModelNew.Cust;
import ModelNew.Enterprise;
import ModelNew.HClub;
import ModelNew.Hotel;
import ModelNew.Manager;
import ModelNew.Network;
import ModelNew.rest;
import ModelNew.systAdmin;
import ui.CustRole.AddServPanel;
import ui.CustRole.BookEventsPanel;
import ui.CustRole.BookRoomServPanel;
import ui.CustRole.CustStartingPanel;
import ui.CustRole.HClubServicesJPanel;
import ui.CustRole.ServiceHotelPanel;
import ui.CustRole.ManageBook;
import ui.CustRole.RestServPanel;
import ui.CustRole.ViewServicedtlsPanel;
import ui.EventManageRole.EvtManagerPanel;
import ui.EventManageRole.ManageOrgAdminForEvt;
import ui.EventManageRole.ManageOrgForEvt;
import ui.EventManageRole.ViewTaskForEvt;
import ui.HClubManageRole.ViewTask;
import ui.HClubManageRole.HClubManagerPanel;
import ui.RestManageRole.ManageOrgForRest;
import ui.HClubManageRole.OrgAdminPanel;
import ui.HClubManageRole.ManageOrgPanel;
import ui.HManageRole.HManagerPanel;
import ui.HManageRole.HOrgAdmin;
import ui.HManageRole.HOrg;
import ui.HManageRole.RPan;
import ui.HManageRole.ViewTaskHotel;
import ui.RestManageRole.AddOrder;
import ui.RestManageRole.ManageOrgAdmForRest;
import ui.RestManageRole.restManagerPanel;
import ui.RestManageRole.TaskRest;
import ui.systAdm.ManageCustPanel;
import ui.systAdm.ManageEntPanel;
import ui.systAdm.ManageManPanel;
import ui.systAdm.ManageNetPanel;
import ui.systAdm.systAdmJPanel;
import ui.confirm.ConfirmEventWorkReq;



/**
 *
 * @author Samikshan
 */
public class MainJFrame extends javax.swing.JFrame {

    private systAdmin systAdmin;
    private String uName;
    private String pwd;
    
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        this.systAdmin = DbUtils.getInstance().retrieveSystem();
        logoutBtn.setEnabled(false);
        ControlPanel.setBackground(new java.awt.Color(0,0, 128);
        WorkArea.setBackground(new java.awt.Color(0 ,0, 220):
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        ControlPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        uNameField = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        pwdField = new javax.swing.JPasswordField();
        WorkArea = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ControlPanel.setPreferredSize(new java.awt.Dimension(138, 813));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("USERNAME");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("PASSWORD");

        loginBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        loginBtn.setText("LOGIN");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        logoutBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        logoutBtn.setText("LOGOUT");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        pwdField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pwdField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ControlPanelLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel1))
                            .addGroup(ControlPanelLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(logoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(loginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(uNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(pwdField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane.setLeftComponent(ControlPanel);

        WorkArea.setLayout(null);

        jLabel3.setBackground(new java.awt.Color(0, 255, 255));
        jLabel3.setFont(new java.awt.Font("Algerian", 1, 48)); // NOI18N
        jLabel3.setText("WELCOME TO Shiv sagar");
        WorkArea.add(jLabel3);
        jLabel3.setBounds(85, 62, 640, 64);

        jSplitPane.setRightComponent(WorkArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1293, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed

        this.uName = uNameField.getText();
        this.pwd = pwdField.getText();

        if (systAdmin.validateuNamepwd(uName, pwd)) {
            String type = systAdmin.finduserType(uName);

            switch (type) {
                case "admin":
                    systAdmJPanel systAdm = new systAdmJPanel(systAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustPanel);
                    jSplitPane.setRightComponent(systAdm);
                    break;

                case "Cust":
                    renderCust(uName);
                    break;

                case "Health Club":
                    renderHClubManager(uName);
                    break;

                case "rest":
                    renderrestManager(uName);
                    break;

                case "Hotel":
                    HManagerPanel();
                    break;

                case "Business Event":
                    EvtManagerPanel();
                    break;
                case "Catering":
                    confirmWorkRequestForEvent();
                    break;
                case "Decor":
                    confirmWorkRequestForEvent();
                    break;
                case "Photography":
                    confirmWorkRequestForEvent();
                    break;
                case "DeliMan":
                    confirmWorkRequestForEvent();
                    break;
                case "Laundary":
                    confirmWorkRequestForEvent();
                    break;
                case "Transportation":
                    confirmWorkRequestForEvent();
                    break;
                case "Phy":
                    confirmWorkRequestForEvent();
                    break;
                case "Therapy":
                    confirmWorkRequestForEvent();
                    break;
                case "Trainer":
                    confirmWorkRequestForEvent();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Type not supported.");
                    return;
            }
            uNameField.setText("");
            pwdField.setText("");
            loginBtn.setEnabled(false);
            logoutBtn.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Login Successful");
        } else {
            JOptionPane.showMessageDialog(this, "Invalid Username or password");
        }
                                         
                    
    }//GEN-LAST:event_loginBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed

        System.out.println("Logout called.");
        DbUtils.getInstance().storeSystem(systAdmin);
        jSplitPane.setRightComponent(WorkArea);
        loginBtn.setEnabled(true);
        logoutBtn.setEnabled(false);
        uNameField.setText("");
        pwdField.setText("");
        System.out.println("Logout success.");
        
    }//GEN-LAST:event_logoutBtnActionPerformed

    
    private void renderNetworkPanel() {
        ManageNetPanel network1 = new ManageNetPanel(systAdmin, this::rendersystAdminPanel);
        jSplitPane.setRightComponent(network1);
    }

    private void renderEnterprisePanel() {
        ManageEntPanel enterprise = new ManageEntPanel(systAdmin, this::rendersystAdminPanel);
        jSplitPane.setRightComponent(enterprise);
    }

    private void renderCustPanel() {
        ManageCustPanel Cust = new ManageCustPanel(systAdmin, this::rendersystAdminPanel);
        jSplitPane.setRightComponent(Cust);
    }

    private void renderManagerPanel() {
        ManageManPanel manager = new ManageManPanel(systAdmin, this::rendersystAdminPanel);
        jSplitPane.setRightComponent(manager);
    }

    private void rendersystAdminPanel() {
        jSplitPane.setRightComponent(new systAdmJPanel(systAdmin, this::renderNetworkPanel, this::renderEnterprisePanel, this::renderManagerPanel, this::renderCustPanel));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel WorkArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPasswordField pwdField;
    private javax.swing.JTextField uNameField;
    // End of variables declaration//GEN-END:variables

    private void renderCust(String uName) {
        Cust Cust = systAdmin.getCustDirec().findCustuName(uName);
        CustStartingPanel CustPanel = new CustStartingPanel(systAdmin, this::renderBookRoomPanel, this::manageBook);
        jSplitPane.setRightComponent(CustPanel);
    }

    private void renderBookRoomPanel() {
        BookRoomServPanel bookroomPanel = new BookRoomServPanel(systAdmin, this::manageCustPanel, uName);
        jSplitPane.setRightComponent(bookroomPanel);
    }

    private void manageBook() {
        ManageBook manageBookPanel = new ManageBook(systAdmin, this::manageCustPanel, this::addServices, this::viewService, uName);
        jSplitPane.setRightComponent(manageBookPanel);
    }

    private void manageCustPanel() {
        jSplitPane.setRightComponent(new CustStartingPanel(systAdmin, this::renderBookRoomPanel, this::manageBook));
    }

    private void addServices(Book Book) {
        AddServPanel service = new AddServPanel(systAdmin, this::bookEvent, this::placeOrder, this::healthPanel,
                this::ServiceHotel, this::manageBook, uName, Book);
        jSplitPane.setRightComponent(service);
    }

    private void bookEvent(Book Book) {
        BookEventsPanel event = new BookEventsPanel(systAdmin, this::addServices, uName, Book);
        jSplitPane.setRightComponent(event);
    }

    private void placeOrder(Book Book) {           //Cust order from rest
        RestServPanel order = new RestServPanel(systAdmin, this::addServices, uName, Book);
        jSplitPane.setRightComponent(order);
    }

    private void healthPanel(Book Book) {             // HClub panel for Cust
        HClubServicesJPanel HClub = new HClubServicesJPanel(systAdmin, this::addServices, uName, Book);
        jSplitPane.setRightComponent(HClub);
    }

    private void ServiceHotel(Book Book) {    //laundary and transport service panel fpr Cust
        ServiceHotelPanel hotelPanel = new ServiceHotelPanel(systAdmin, this::addServices, uName, Book);
        jSplitPane.setRightComponent(hotelPanel);
    }

    private void viewService(Book Book) {
        ViewServicedtlsPanel viewService = new ViewServicedtlsPanel(systAdmin, this::manageBook, uName, Book);
        jSplitPane.setRightComponent(viewService);
    }
    
    private void renderHClubManager(String uName) {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<HClub> HClubs = network.get(i).getentDir().getListOfHClub();
            for (int j = 0; j < HClubs.size(); j++) {
                List<Manager> manager = HClubs.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        HClubManagerPanel healthManagerPanel = new HClubManagerPanel(systAdmin, this::ViewTask, this::createOrg,
                                this::OrgAdminPanel);
                        jSplitPane.setRightComponent(healthManagerPanel);

                    }
                }
            }
        }
    }

    private Network finduserNetworkForHClub() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<HClub> HClubs = network.get(i).getentDir().getListOfHClub();
            for (int j = 0; j < HClubs.size(); j++) {
                List<Manager> manager = HClubs.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return network.get(i);

                    }
                }
            }
        }
        return null;
    }

    private Enterprise finduserHClub() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<HClub> health = network.get(i).getentDir().getListOfHClub();
            for (int j = 0; j < health.size(); j++) {
                List<Manager> manager = health.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return health.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void ViewTask() {   //view task for health club
        String type = systAdmin.finduserType(uName);
        HClub HClub = (HClub) finduserHClub();
        ViewTask viewTask = new ViewTask(systAdmin, this::HClubManagerPanel, uName, type, HClub
        );
        jSplitPane.setRightComponent(viewTask);
    }

    private void createOrg() {
        Network network = finduserNetworkForHClub();
        ManageOrgPanel org = new ManageOrgPanel(systAdmin, this::HClubManagerPanel, uName, network);
        jSplitPane.setRightComponent(org);
    }

    private void OrgAdminPanel() {   //create org admin for health club
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForHClub();
        OrgAdminPanel orgAdmin = new OrgAdminPanel(systAdmin, this::HClubManagerPanel, uName, type, network);
        jSplitPane.setRightComponent(orgAdmin);
    }

    private void HClubManagerPanel() {   //go back to HClub
        jSplitPane.setRightComponent(new HClubManagerPanel(systAdmin, this::ViewTask, this::createOrg, this::OrgAdminPanel));
    }

    private void renderrestManager(String uName) {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<rest> rests = network.get(i).getentDir().getListOfrests();
            for (int j = 0; j < rests.size(); j++) {
                List<Manager> manager = rests.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        restManagerPanel restAssign = new restManagerPanel(systAdmin, this::renderViewTask1, this::renderrestOrg, this::renderrestAdmin, this::AddOrder);
                        jSplitPane.setRightComponent(restAssign);
                    }
                }
            }
        }
    }

    private Network finduserNetworkForrest() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<rest> rest = network.get(i).getentDir().getListOfrests();
            for (int j = 0; j < rest.size(); j++) {
                List<Manager> manager = rest.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return network.get(i);

                    }
                }
            }
        }
        return null;
    }

    private Enterprise finduserrest() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<rest> rest = network.get(i).getentDir().getListOfrests();
            for (int j = 0; j < rest.size(); j++) {
                List<Manager> manager = rest.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return rest.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void renderViewTask1() {
        String type = systAdmin.finduserType(uName);
        rest rest = (rest) finduserrest();
        TaskRest resMan = new TaskRest(systAdmin, this::restManagerPanel, uName, type, rest);
        jSplitPane.setRightComponent(resMan);
    }

    private void renderrestOrg() {
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForrest();
        ManageOrgForRest org = new ManageOrgForRest(systAdmin, this::restManagerPanel, uName, type, network
        );
        jSplitPane.setRightComponent(org);
    }

    private void renderrestAdmin() { //create organisation admin under restauarant
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForrest();
        ManageOrgAdmForRest orgAdmin = new ManageOrgAdmForRest(systAdmin, this::restManagerPanel, uName, type, network);
        jSplitPane.setRightComponent(orgAdmin);
    }

    private void AddOrder() {
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForrest();
        AddOrder order = new AddOrder(systAdmin, this::restManagerPanel, uName, type, network);
        jSplitPane.setRightComponent(order);
    }

    private void restManagerPanel() {
        jSplitPane.setRightComponent(new restManagerPanel(systAdmin, this::renderViewTask1, this::renderrestOrg,
                this::renderrestAdmin, this::AddOrder));
    }

    private void renderHotelManager(String uName) {   //hotel panel
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<Hotel> hotel = network.get(i).getentDir().getListOfHotel();
            for (int j = 0; j < hotel.size(); j++) {
                List<Manager> manager = hotel.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        HManagerPanel hotelPanel = new HManagerPanel(systAdmin, this::renderViewTask2, this::renderHotelOrg,
                                this::renderHotelAdmin, this::renderRoomPanel);
                        jSplitPane.setRightComponent(hotelPanel);

                    }
                }
            }
        }
    }

    private Network finduserNetworkForHotel() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<Hotel> hotel = network.get(i).getentDir().getListOfHotel();
            for (int j = 0; j < hotel.size(); j++) {
                List<Manager> manager = hotel.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        System.out.println("manager found is " + manager.get(k).getuName() + " and city is " + network.get(i));
                        return network.get(i);
                    }
                }
            }
        }
        return null;
    }

    private Enterprise findManagerHotel() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<Hotel> hotel = network.get(i).getentDir().getListOfHotel();
            for (int j = 0; j < hotel.size(); j++) {
                List<Manager> manager = hotel.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return hotel.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void renderViewTask2() {
        String type = systAdmin.finduserType(uName);
        Hotel hotel = (Hotel) findManagerHotel();
        ViewTaskHotel hotelPanel = new ViewTaskHotel(systAdmin, this::HManagerPanel, uName, type, hotel);
        jSplitPane.setRightComponent(hotelPanel);
    }

    private void renderHotelOrg() {
        String type = systAdmin.finduserType(uName);
        Network network1 = finduserNetworkForHotel();
        HOrg org = new HOrg(systAdmin, this::HManagerPanel, uName, type, network1);
        jSplitPane.setRightComponent(org);
    }

    private void renderHotelAdmin() {
        String type = systAdmin.finduserType(uName);
        Network network1 = finduserNetworkForHotel();

        HOrgAdmin orgAdmin = new HOrgAdmin(systAdmin, this::HManagerPanel, uName, type, network1);
        jSplitPane.setRightComponent(orgAdmin);
    }

    private void renderRoomPanel() {
        Network network = finduserNetworkForHotel();
        RPan room = new RPan(systAdmin, this::HManagerPanel, network, uName);
        jSplitPane.setRightComponent(room);
    }

    private void HManagerPanel() {
        jSplitPane.setRightComponent(new HManagerPanel(systAdmin, this::renderViewTask2, this::renderHotelOrg, this::renderHotelAdmin, this::renderRoomPanel));
    }

    private void renderEventManager(String uName) {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<BussEvent> event = network.get(i).getentDir().getListOfEvents();
            for (int j = 0; j < event.size(); j++) {
                List<Manager> manager = event.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        EvtManagerPanel eventPanel = new EvtManagerPanel(systAdmin, this::renderViewTask3, this::renderEventOrg,
                                this::renderEventAdmin);
                        jSplitPane.setRightComponent(eventPanel);

                    }
                }
            }
        }
    }

    private Network finduserNetworkForEvents() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<BussEvent> event = network.get(i).getentDir().getListOfEvents();
            for (int j = 0; j < event.size(); j++) {
                List<Manager> manager = event.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return network.get(i);

                    }
                }
            }
        }
        return null;
    }

    private Enterprise finduserEnterprise() {
        List<Network> network = systAdmin.getListOfNetwork();
        for (int i = 0; i < network.size(); i++) {
            List<BussEvent> event = network.get(i).getentDir().getListOfEvents();
            for (int j = 0; j < event.size(); j++) {
                List<Manager> manager = event.get(j).getListOfManager();
                for (int k = 0; k < manager.size(); k++) {
                    if (manager.get(k).getuName().equals(uName)) {
                        return event.get(j);
                    }
                }
            }
        }
        return null;
    }

    private void confirmWorkRequestForEvent() {
        List<Network> network = systAdmin.getListOfNetwork();
        String type = systAdmin.finduserType(uName);
        for (int i = 0; i < network.size(); i++) {
            ConfirmEventWorkReq workRequest = new ConfirmEventWorkReq(systAdmin, uName, type);
            jSplitPane.setRightComponent(workRequest);
        }
    }

    private void renderViewTask3() {     // view Business Event manager panel
        String type = systAdmin.finduserType(uName);
        BussEvent event = (BussEvent) finduserEnterprise();
        ViewTaskForEvt eventPanel = new ViewTaskForEvt(systAdmin, this::EvtManagerPanel, uName, type, event);
        jSplitPane.setRightComponent(eventPanel);
    }

    private void renderEventOrg() {     // add an organisation for event
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForEvents();
        ManageOrgForEvt org = new ManageOrgForEvt(systAdmin, this::EvtManagerPanel, uName, type, network);
        jSplitPane.setRightComponent(org);
    }

    private void renderEventAdmin() { //create organisation admin under event
        String type = systAdmin.finduserType(uName);
        Network network = finduserNetworkForEvents();
        ManageOrgAdminForEvt orgAdmin = new ManageOrgAdminForEvt(systAdmin, this::EvtManagerPanel, uName, type, network);
        jSplitPane.setRightComponent(orgAdmin);
    }

    private void EvtManagerPanel() {    //go back to event manager panel
        jSplitPane.setRightComponent(new EvtManagerPanel(systAdmin, this::renderViewTask3, this::renderEventOrg, this::renderEventAdmin));
    }

}
